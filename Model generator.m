%% Intialisation
% This section generates varaibles required for the .inp file for
% modelling.

%This varaibles askes for required number of high throughput models
%to be generated by the designed system.
high_throughput_model = input('Enter the number of models that need to be created for high throughput.\n');
% Packmol requires us to enter a tolerance value for the arrangement which
% is stored in the variable.
model_tolerance= input('\nEnter the tolerance value to be considered for molecule arrangementin the model.\n(in nanometers) Format:- 2.0\n');
% Varible to store the dimension of the digital model created in
% nanometers.
dimensions = input ('\nEnter the dimension of the model box in nanometers.\n Format:- [L B H] eg. :-[ 50 60 70]\n');
% File name saved in the same folder as the program to import the molecular
% structure of different polymers or nanocomposites. 
Molecule_name= input('\nFor loading the molecules enter the name of the file(without.pdb)\n Format:- ["Nanocomposite", "Polymer1", "Polymer2"]\n');
%Number of Carbon atoms per molecule structure.
Molecule_C_atom = input ('\nEnter Number of Carbon atoms respectively.\n Format:- [28, 19, 20]\n');
% No. of molecules the user wants to input for different molecules in the
% mixture.
Molecule_number = input('\nTotal number of molecues in the mix respectively.\n Format:- [50 40 30]\n');
% Name of the generated file of the model.
file_name = input('\nInput the file name to save the models.\n For file name -> CNT&ethe_model_1.pdb, CNT&ethe_model_2.pdb... <- Enter Format:- "CNT&ethe_model_"\n');
%This variable store the number of molecules entered.
L = length(Molecule_name);
% Calculates the Total number of C atoms in the current polymer.
total_Catom = 0;
% Stores the generated resultant of the execution packmol output for each model.
cmd_promt_out = 0;
%% MODEL GENERATION
% This section creates multiple diferent models with the same parameters 
% but different arrangments for high-throughput modelling. The below
% For loops ensure that generation og models with the required filee type.
  
for x = 1:high_throughput_model
    % This loop generates an .inp file for all model generation in packmole. 
    fileID = fopen('polymernanocomposite.inp','w');
    fprintf(fileID,'tolerance %f\n', model_tolerance);
    fprintf(fileID,'filetype pdb\n');
    fprintf(fileID,'output %s%i.pdb\n\n', file_name, x);
    fprintf(fileID,'seed %i\n', x);
    fprintf(fileID,'randominitialpoint\n\n');
    fprintf(fileID,'avoid_overlap yes\n\n');
    % The below FOR loop is used to format the inp file for different
    % molecule type.
    for y =  1:L
        fprintf(fileID,'structure %s.pdb\n', Molecule_name(y)) ;
        fprintf(fileID,'  number %i\n', Molecule_number(y));
        fprintf(fileID,'  inside box 0. 0. 0.  %i. %i. %i.\n', dimensions(1), dimensions(2), dimensions(3)) ;
        fprintf(fileID,'end structure\n\n');
        total_Catom = total_Catom + Molecule_number(y)*Molecule_C_atom(y);
    end
    % Generateed .inp file contains executable commands for packmol. 
    fclose(fileID);
    % The statement below executes packmol in the file where the program is
    % present in a cmd prompt. 
    command = ' packmol.exe<polymernanocomposite.inp';
    [status,cmdout] = dos(command);
    % THe varaible array saves the output after each execution of packmol
    % and model generation. Each generated model has a saved cmd_prompt_out
    % value which could be accessed using the  index no.
    cmd_prompt_out(x)=convertCharsToStrings(cmdout);
end